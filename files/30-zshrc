export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
POWERLEVEL9K_MODE="awesome-patched"
DISABLE_UPDATE_PROMPT="true"

plugins=(ansible colored-man-pages git gitignore kubectl virtualenvwrapper vscode wd web-search you-should-use zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting)

# Output for you-should-use recommendations
export YSU_MESSAGE_FORMAT="$(tput setaf 1)Use %alias instead of %command $(tput sgr0)"

# Sets autosuggest color so it's readable with Solarized Dark
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#586e75"

source $ZSH/oh-my-zsh.sh

alias gbsc="git branch --show-current"
alias gdel="git stash && git stash drop"
alias ksw="kubectx"
alias kns="kubens"
alias mkvenv="mkvirtualenv"
alias rmvenv="rmvirtualenv"
alias tf="terraform"
alias tg="terragrunt"
alias workoff="deactivate"

export PATH=$PATH:~/.local/bin:/usr/local/go/bin

glb() {
  result=$(git branch -a --color=always | grep -v '/HEAD\s' | sort |
    fzf --height 50% --border --ansi --tac --preview-window right:70% \
      --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
    sed 's/^..//' | cut -d' ' -f1)

  if [[ $result != "" ]]; then
    if [[ $result == remotes/* ]]; then
      git checkout --track $(echo $result | sed 's#remotes/##')
    else
      git checkout "$result"
    fi
  fi
}

gpsu() {
    git push --set-upstream origin $(gbsc)
}

gtags() {
    current_rev=$(git describe --abbrev=0 2>/dev/null | sed 's/v//')
	current_rev_split=($(echo $current_rev | tr "." " "))
	decrement=$([[ $(ps -p $$) =~ "zsh" ]]; echo $?)
    major=$((current_rev_split[1-decrement]))
    minor=$((current_rev_split[2-decrement]))
    patch=$((current_rev_split[3-decrement]))
    if [ -z "$current_rev" ]; then
        echo "No tags found - are you in a git repo?"
        return 1
    fi

	opts=("Bugfix" "Small change" "Large change" "Overwrite v$current_rev" "Cancel")
    select opt in "${opts[@]}"
    do
        case $REPLY in
        1)  new_rev="$major.$minor.$((patch+1))"
            break
            ;;
        2)  new_rev="$major.$((minor+1)).0"
            break
            ;;
        3)  new_rev="$((major+1)).0.0"
            break
            ;;
		4)  echo "Enter a commit message: "
            read commit
            git tag -d "v$current_rev"
            git push origin :refs/tags/"v$current_rev"
            git tag "v$current_rev" -a -m $commit
            git push origin refs/tags/"v$current_rev"
            return 0
            ;;
        5)  echo "Bye!"
            return 0
            ;;
        *)  echo "Invalid option: $REPLY"
            ;;
        esac
    done

    echo "Enter a commit message: "
	read commit
	git tag "v$new_rev" -a -m $commit
	git push origin refs/tags/"v$new_rev"
}

kshell() {
    if [[ $1 == -h || $1 == --help ]]; then
        echo "Usage: kshell <namespace> <container>"
		echo "If no args are provided, kshell will run kubectx and kubens"
		echo "If -n is passed as the first arg, kshell will use the specified namespace in the current context"
	elif [[ $1 == -n ]]; then
		k exec -n $2 -it $(kgp -n $2 | fzf | awk '{print $1}') -- /bin/bash
    elif [ $# -eq 0 ]; then
		kubectx
		kubens
		k exec -it $(kgp | fzf | awk '{print $1}') -- /bin/bash
	else
		kshell -h
    fi
}

kdesc() {
	if [[ $1 == -h || $1 == --help ]]; then
		echo "Usage: kdesc <namespace> <pod partial name>"
		echo "If no args are provided, kdesc will run kubectx and kubens"
		echo "If -n is passed as the first arg, kdesc will use the specified namespace in the current context"
		echo "If -p is passed as the first arg, kdesc will use the specified partial pod name across all namespaces in the current context"
	elif [ $# -eq 0 ]; then
		kubectx
		kubens
		kdp $(echo $(kgp | fzf | awk -F" " '{print $1}'))
	elif [[ $1 == -n ]]; then
		kdp -n $2 $(echo $(kgp -n $2 | fzf | awk -F" " '{print $1}'))
	#elif [[ $1 == -p ]]; then
		#kdp -n $(echo $(kgp --all-namespaces | fzf --query $2 | awk -F" " '{print $2}'))
	else
		kdesc -h
	fi
}

# Change from default of **
export FZF_COMPLETION_TRIGGER="~~"

# Enable fzf keybindings
source /usr/share/doc/fzf/examples/key-bindings.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
